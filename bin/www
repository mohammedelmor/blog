#!/usr/bin/env node


/**
 * Module dependencies.
 */

const path = require("node:path");
const rootDir = path.resolve(__dirname, "..")
const dotenvPath = path.resolve(rootDir, `.env.${process.env.NDOE_ENV}`)
require('dotenv').config({path: dotenvPath})
const app = require('../app');
const debug = require('debug')('blog:server');
const sequelizeDebug = require('debug')('sequelize:debug');
const http = require('http');
const sequelize = require("../database")


setupDb()
    .then(() => {
        sequelize.sync({force: true})
    })
    .catch(() => {
        process.exit(1)
    })

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

const server = http.createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}


async function setupDb() {
    try {
        await sequelize.authenticate();
        sequelizeDebug('Connection has been established successfully.');
    } catch (error) {
        sequelizeDebug('Unable to connect to the database: %s', error);
    }
}
